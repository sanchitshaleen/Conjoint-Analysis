airline$Month[airline$Month==2]<-"Feb"
airline$Month[airline$Month==3]<-"Mar"
airline$Month[airline$Month==4]<-"Apr"
airline$Month[airline$Month==5]<-"May"
airline$Month[airline$Month==6]<-"Jun"
airline$Month[airline$Month==7]<-"Jul"
airline$Month[airline$Month==8]<-"Aug"
airline$Month[airline$Month==9]<-"Sep"
airline$Month[airline$Month==10]<-"Oct"
airline$Month[airline$Month==11]<-"Nov"
airline$Month[airline$Month==12]<-"Dec"
p <- ggplot(airline, aes(x=Month, y=DayofMonth, fill=TotalDelay))
p + geom_tile()+ geom_raster()
airline$TotalDelay<-1.0 *(airline$ArrDelay+airline$DepDelay+airline$CarrierDelay + airline$WeatherDelay+airline$NASDelay + airline$SecurityDelay +airline$LateAircraftDelay)/60
p <- ggplot(airline, aes(x=CRSDepTime, y=DayOfWeek, fill=TotalDelay))
p + geom_tile()+ geom_raster()
p <- ggplot(airline, aes(x=Month, y=DayofMonth, fill=TotalDelay))
p + geom_tile()+ geom_raster()
library(rCharts)
install.packages("rChartsCalmap")
library(rChartsCalmap)
updateR()
install.packages("installr")
library(installr)
updateR()
updateR()
install.packages("rChartsCalmap")
library(rChartsCalmap)
library(rChartsCalmap)
install.packages("rChartsCalmap")
sessionInfo()
install.packages("Rcpp")
library(Rcpp)
sessionInfo()
library(installr)
updateR()
library(rChartsCalmap)
library(Rcpp)
library(installr)
library(rChartsCalmap)
install.packages("rChartsCalmap")
sessionInfo()
sessionInfo()
library(rChartsCalmap)
library(Rcpp)
library(installr)
library(rChartsCalmap)
install.packages("rChartsCalmap")
library(rChartsCalmap)
sessionInfo()
airline<-read.csv("F:/Predictive Modelling Assignment/Predictive-Modelling-JScott-/ABIA.csv")
airline[c("CarrierDelay","WeatherDelay","NASDelay","SecurityDelay",
"LateAircraftDelay")][is.na(airline[c("CarrierDelay","WeatherDelay","NASDelay","SecurityDelay",
"LateAircraftDelay")])] <- 0
airline$TotalDelay<-airline$ArrDelay+airline$DepDelay+airline$CarrierDelay + airline$WeatherDelay+airline$NASDelay + airline$SecurityDelay +airline$LateAircraftDelay/60
airline$Month[airline$Month==1]<-"Jan"
airline$Month[airline$Month==2]<-"Feb"
airline$Month[airline$Month==3]<-"Mar"
airline$Month[airline$Month==4]<-"Apr"
airline$Month[airline$Month==5]<-"May"
airline$Month[airline$Month==6]<-"Jun"
airline$Month[airline$Month==7]<-"Jul"
airline$Month[airline$Month==8]<-"Aug"
airline$Month[airline$Month==9]<-"Sep"
airline$Month[airline$Month==10]<-"Oct"
airline$Month[airline$Month==11]<-"Nov"
airline$Month[airline$Month==12]<-"Dec"
p <- ggplot(airline, aes(x=CRSDepTime, y=DayOfWeek, fill=TotalDelay))
p + geom_tile()+ geom_raster()
library(ggplot2)
p <- ggplot(airline, aes(x=Month, y=DayofMonth, fill=TotalDelay))
p + geom_tile()+ geom_raster()
author_dirs = Sys.glob('F:/Predictive Modelling(JScott)/STA380-master/STA380-master/data/ReutersC50/C50train/*')
author_dirs = author_dirs[1:50]
file_list = NULL
labels = NULL
for(author in author_dirs) {
author_name = substring(author, first=29)
files_to_add = Sys.glob(paste0(author, '/*.txt'))
file_list = append(file_list, files_to_add)
labels = append(labels, rep(author_name, length(files_to_add)))
}
all_docs = lapply(file_list, readerPlain)
library(tm)
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
all_docs = lapply(file_list, readerPlain)
library(ggplot2)
library(maps)
#load us map data
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = flights), color="coral1") + scale_size(name="Total Flights")
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights)), color="coral1")
p <- p +geom_point(aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red")
+ scale_size(name="Total Flights")
p <- p +geom_point(aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p <- p +geom_point(aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
library(ggplot2)
library(maps)
#load us map data
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
#p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights)), color="coral1")
head(airline3)
airline3<-mergeTable
airline<-read.csv("F:/Predictive Modelling Assignment/Predictive-Modelling-JScott-/ABIA.csv")
mergeTable = data.frame(matrix(NA, nrow = 99260))
mergeTable = mergeTable[,-c(1)]
mergeTable = cbind(airline,mergeTable)
mergeTable = merge(mergeTable, airports, by.x = "Origin", by.y = "IATA", all.x = TRUE)
names(mergeTable)
mergeTable = mergeTable[,-c(30,32)]
colnames(mergeTable)[32] = "Origin_Longitude"
colnames(mergeTable)[31] = "Origin_Latitude"
colnames(mergeTable)[30] = "Origin_City"
mergeTable = merge(mergeTable, airports, by.x = "Dest", by.y = "IATA", all.x = TRUE)
mergeTable = mergeTable[,-c(33,35)]
head(mergeTable)
colnames(mergeTable)[33] = "Dest_City"
colnames(mergeTable)[34] = "Dest_Latitude"
colnames(mergeTable)[35] = "Dest_Longitude"
airports = read.csv('F:/Predictive Modelling Assignment/Predictive-Modelling-JScott-/airports.dat', header = FALSE)
head(airports)
names(airports)= c('ID', 'Airport Name','City','Country','IATA','ICAO','Latitude','Longitude','V9', 'v10', 'v11', 'v12')
names(airports)
airports = airports[,-c(1,6,9,10,11,12)]
airports = airports[,c(4,1,2,3,5,6)]
head(airports)
##Process the data available
airline<-read.csv("F:/Predictive Modelling Assignment/Predictive-Modelling-JScott-/ABIA.csv")
mergeTable = data.frame(matrix(NA, nrow = 99260))
mergeTable = mergeTable[,-c(1)]
mergeTable = cbind(airline,mergeTable)
mergeTable = merge(mergeTable, airports, by.x = "Origin", by.y = "IATA", all.x = TRUE)
names(mergeTable)
mergeTable = mergeTable[,-c(30,32)]
colnames(mergeTable)[32] = "Origin_Longitude"
colnames(mergeTable)[31] = "Origin_Latitude"
colnames(mergeTable)[30] = "Origin_City"
mergeTable = merge(mergeTable, airports, by.x = "Dest", by.y = "IATA", all.x = TRUE)
mergeTable = mergeTable[,-c(33,35)]
head(mergeTable)
colnames(mergeTable)[33] = "Dest_City"
colnames(mergeTable)[34] = "Dest_Latitude"
colnames(mergeTable)[35] = "Dest_Longitude"
airline3<-mergeTable
airline3$flights<-1
airline3<-aggregate(flights ~ Origin_City+Origin_Latitude+Origin_Longitude, data = airline3, sum)
airline3$Origin_Latitude<-as.numeric(airline3$Origin_Latitude)
airline3$Origin_Longitude<-as.numeric(airline3$Origin_Longitude)
map <- get_map(location = 'USA', zoom = 4, maptype = "roadmap", color = "bw")
mapPoints <- ggmap(map) + geom_point(aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"), data = airline3, alpha = .7)
library(ggmap)
airports = read.csv('F:/Predictive Modelling Assignment/Predictive-Modelling-JScott-/airports.dat', header = FALSE)
head(airports)
names(airports)= c('ID', 'Airport Name','City','Country','IATA','ICAO','Latitude','Longitude','V9', 'v10', 'v11', 'v12')
names(airports)
airports = airports[,-c(1,6,9,10,11,12)]
airports = airports[,c(4,1,2,3,5,6)]
head(airports)
##Process the data available
airline<-read.csv("F:/Predictive Modelling Assignment/Predictive-Modelling-JScott-/ABIA.csv")
mergeTable = data.frame(matrix(NA, nrow = 99260))
mergeTable = mergeTable[,-c(1)]
mergeTable = cbind(airline,mergeTable)
mergeTable = merge(mergeTable, airports, by.x = "Origin", by.y = "IATA", all.x = TRUE)
names(mergeTable)
mergeTable = mergeTable[,-c(30,32)]
colnames(mergeTable)[32] = "Origin_Longitude"
colnames(mergeTable)[31] = "Origin_Latitude"
colnames(mergeTable)[30] = "Origin_City"
mergeTable = merge(mergeTable, airports, by.x = "Dest", by.y = "IATA", all.x = TRUE)
mergeTable = mergeTable[,-c(33,35)]
head(mergeTable)
colnames(mergeTable)[33] = "Dest_City"
colnames(mergeTable)[34] = "Dest_Latitude"
colnames(mergeTable)[35] = "Dest_Longitude"
airline3<-mergeTable
airline3$flights<-1
airline3<-aggregate(flights ~ Origin_City+Origin_Latitude+Origin_Longitude, data = airline3, sum)
airline3<-aggregate(flights ~ Origin_City+Origin_Latitude+Origin_Longitude, data = airline3, sum)
library(ggmap)
map <- get_map(location = 'USA', zoom = 4, maptype = "roadmap", color = "bw")
mapPoints <- ggmap(map) + geom_point(aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"), data = airline3, alpha = .7)
ggmap(map)
library(ggplot2)
library(maps)
#load us map data
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights)), color="coral1")
p
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = flights), color="coral1")
p
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = flights*1000), color="coral1")
head(airline3)
p
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.5, aes(x=long, y=lat, label=Origin_City), colour="gold2", size=4 )
```
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.5, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
```
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.5, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
```
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = flights), color="coral1")
head(airline3)
p
all_states <- map_data("state")
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = flights), color="coral1")
head(airline3)
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.5, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
p
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
p
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = flights), color="coral1")
head(airline3)
# p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
#scale_size(name="Total Flights")
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
p
library(ggplot2)
library(maps)
#load us map data
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights)), color="coral1")
head(airline3)
# p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
#scale_size(name="Total Flights")
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
p
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey1" )
p
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights)), color="coral1")
head(airline3)
# p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
#scale_size(name="Total Flights")
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
p
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="black", fill="grey1" )
p
all_states <- map_data("state", colors("Blue"))
all_states <- map_data("state", col="blue")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
?map_data
all_states <- map_data("state", colour="blue")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
all_states <- map_data("state", colour="white")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
?map_data
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights)), color="coral1")
head(airline3)
# p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
#scale_size(name="Total Flights")
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="gold2", size=4 )
p
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="orange", size=4 )
p
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights*100)), color="coral1")
head(airline3)
# p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
#scale_size(name="Total Flights")
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="orange", size=4 )
p
library(ggplot2)
library(maps)
#load us map data
all_states <- map_data("state", colour="white")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
p
?map_data
p <- p + geom_point( data=airline3, aes(x=Origin_Longitude, y=Origin_Latitude, size = sqrt(flights*100)), color="coral1")
head(airline3)
# p <- p +geom_point(data=airline3, aes(y = Origin_Latitude, x = Origin_Longitude, size = sqrt(flights*1000), colour = "red"))
p
#scale_size(name="Total Flights")
p <- p + geom_text( data=airline3, hjust=0.5, vjust=-0.8, aes(x=Origin_Longitude, y=Origin_Latitude, label=Origin_City), colour="orange", size=4 )
p
library(MASS)
data(Boston)
boxplot.stats(boxplot(Boston$lstat,xlab="% of lower status in the population"))
boxplot.stats(boxplot(Boston$lstat,xlab="% of lower status in the population"))
require(stats)
boxplot.stats(boxplot(Boston$lstat,xlab="% of lower status in the population"))
boxplot.stats(Boston$lstat,xlab="% of lower status in the population")
boxplot.stats(Boston$lstat,xlab="% of lower status in the population")
boxplot.stats(Boston$lstat)
boxplot.stats(Boston$medv)
plot(Boston$medv,Boston$lstat)
plot(Boston$lstat,Boston$medv)
lstat_box<-boxplot(Boston$lstat,xlab="% of lower status in the population")
medv_box<-boxplot(Boston$medv,xlab="median home value")
plot(Boston$lstat,Boston$medv)
outlier.colors <- (medv %in% medv_box$out)*1 + (lstat %in% lstat_box$out)*2
outlier.colors <- (Boston$medv %in% medv_box$out)*1 + (Boston$lstat %in% lstat_box$out)*2
outlier.colors <- outlier.colors + 1
plot(medv, lstat, col=outlier.colors)
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- (Boston$medv %in% medv_box$out)*1 + (Boston$lstat %in% lstat_box$out)*2
outlier.colors <- outlier.colors + 3
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- outlier.colors + 2
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- outlier.colors + 4
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- outlier.colors + 5
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- outlier.colors + 6
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- outlier.colors + 4
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- outlier.colors + 3
plot(Boston$medv, Boston$lstat, col=outlier.colors)
outlier.colors <- (Boston$medv %in% medv_box$out)*1 + (Boston$lstat %in% lstat_box$out)*2
outlier.colors <- outlier.colors + 4
plot(Boston$medv, Boston$lstat, col=outlier.colors)
lm(Boston$medv,Boston$lstat)
?lm()
lm(medv~lstat,data=Boston)
summary(model)
model<-lm(medv~lstat,data=Boston)
summary(model)
'%ni%' <- Negate('%in%')
medv_new<-Boston$medv %in% medv_box$out
lstat_new<-Boston$lstat %in% lstat_box$out
plot(medv_new, lstat_new)
'%ni%' <- Negate('%in%')
medv_new<-Boston$medv %in% medv_box$out
lstat_new<-Boston$lstat %in% lstat_box$out
plot(medv_new, lstat_new)
?plyr
?sd()
?cf()
shiny::runApp('G:/material/R Tutorials/RShiny Sample Code/Widgets')
shiny::runApp('G:/material/R Tutorials/RShiny Sample Code/selectInput')
shiny::runApp('G:/material/R Tutorials/RShiny Sample Code/ActionButton&Isolate(I)')
library(datasets)
?rock
?WorldPhones"
?WorldPhones
library(datasets)
?WorldPhones
library(datasets)
?WorldPhones
View(WorldPhones)
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
shiny::runApp('F:/Fall Term/Advanced Predictive Modelling/HW2/Shiny_Ques4')
?randomforest
??randomforest
?randomForest
install.packages("arules")
require(arules)
data(package="arules")
data("Groceries")
Groc<-data("Groceries")
View(Groc)
Groc<-data("Groceries")
tran_Groc<-read.transactions(Groc)
Groc<-data("Groceries")
tran_Groc<-read.transactions("Groceries.csv")
require(arules)
data(package="arules")
View(data("Groceries"))
View(Groceries)
data(Groceries)
View(Groceries)
View(data(Groceries))
tran_Groc<-read.transactions("groceries.csv",sep=",")
data(package="arules")
Groceries
View(Groceries)
summary(Groceries)
inspect(Groceries)
inspect(Groceries[1:5])
inspect(Groceries[5])
itemFrequency(Groceries[,1])
itemFrequency(Groceries[,2])
itemFrequency(Groceries[1,2])
itemFrequency(Groceries[,])
itemFrequency(Groceries[,1:6])
itemFrequencyPlot(Groceries,support=0.2)
itemFrequencyPlot(Groceries,support=0.1)
itemFrequencyPlot(Groceries,topN=5)
m1<-apriori(Groceries)
m1<-apriori(Groceries)
m1
m1<-apriori(Groceries,parameter = list(support=0.007,confidence=0.25,milen=2))
m1<-apriori(Groceries,parameter = list(support=0.007,confidence=0.25,minlen=2))
m1
summary(m1)
inspect(m1)
inspect(m1[1:5])
inspect(sort(m1,by="lift"))
inspect(sort(m1,by="lift")[1:4])
install.packages("conjoint")
library(conjoint)
attribute<-list(
Origin=c("European","Canadian","Japanese"),
Price=c("6.19","5.49","4.79"),
Body=c("Rich full bodied","Regular","Crisp and clear"),
Aftertaste=c("strong","mild", "very mild"),
Calories=c("full", "regular", "low"),
Packaging=c("Six 12Oz Large", "Six 12Oz Small",   "Four 16Oz"),
Glass=c("Green Label",    "Brown Label",  "Brown Painted")
)
attribute
profiles<-expand.grid(attribute)
profiles
design<-caFactorialDesign(data=profiles,type="fractional", cards=21)
design
?caFactorialDesign
head(design)
len(design)
nrow(design)
setwd("F:/Capstone Project/Conjoint Analysis")
KrinLev <- read.csv("KrinLev.csv", header=F)
KrinPref <- read.csv("KrinPref.csv")
library(conjoint)
attribute<-list(
Origin=c("European","Canadian","Japanese"),
Price=c("6.19","5.49","4.79"),
Body=c("Rich full bodied","Regular","Crisp and clear"),
Aftertaste=c("strong","mild", "very mild"),
Calories=c("full", "regular", "low"),
Packaging=c("Six 12Oz Large", "Six 12Oz Small",   "Four 16Oz"),
Glass=c("Green Label",    "Brown Label",  "Brown Painted")
)
profiles<-expand.grid(attribute)
design<-caFactorialDesign(data=profiles,type="fractional", cards=21)
print(design)
Conjoint(KrinPref,design,KrinLev)
imp<-caImportance(KrinPref,design)
imp
uti<-caPartUtilities(KrinPref,design,KrinLev)
uti
library(cluster)
library(fpc)
library(fpc)
?library(fpc)
?fpc
install.packages("fpc")
?fpc
library(fpc)
?fpc
??fpc
plotcluster(KrinPref, segments$cluster)
library(cluster)
library(fpc)
plotcluster(KrinPref, segments$cluster)
plotcluster(KrinPref, segments.cluster())
plotcluster(KrinPref, segments$cluster())
?plotcluster
y
library(fpc)
plotcluster(KrinPref, segments$cluster)
uti
